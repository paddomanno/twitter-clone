import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { appRouter } from "~/server/api/root";

import { api } from "~/utils/api";

// type PageProps = InferGetServerSidePropsType<typeof getStaticProps>;

const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data: user } = api.profile.getUserByUsername.useQuery({
    username,
  });

  // if (isLoading) return <LoadingPage />; // no loading state because we're using SSGHelpers to hydrate the username
  if (!user) return <div>Failed to load</div>;

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="pt-4 shadow-inner shadow-black/50">
          <h1>Profile View</h1>
          <div>{`@${user.username}`}</div>
        </div>
      </PageLayout>
    </>
  );
};
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { prisma } from "~/server/db";
import superjson from "superjson";
import { PageLayout } from "~/components/MyLayout";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: { prisma, currentUserId: null },
    transformer: superjson,
  });

  const username = context.params?.username;

  if (!username || typeof username !== "string" || username.length === 0) {
    throw new Error("Invalid username");
  }

  const usernameWithoutAt = username.replace("@", "");

  await ssg.profile.getUserByUsername.prefetch({ username: usernameWithoutAt });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username: usernameWithoutAt,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default ProfilePage;
