import { GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { PageLayout } from "~/components/MyLayout";
import PostList from "~/components/PostList";
import LoadingPage from "~/components/LoadingSpinner";

import { api } from "~/utils/api";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";

// type PageProps = InferGetServerSidePropsType<typeof getStaticProps>;

const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data: user } = api.profile.getUserByUsername.useQuery({
    username,
  });

  // if (isLoading) return <LoadingPage />; // no loading state because we're using SSGHelpers to hydrate the username
  if (!user) return <div>Failed to load</div>;

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="relative h-32 bg-indigo-500 pt-4 shadow-inner shadow-black/50">
          <Image
            src={user.profileImageUrl}
            alt="Profile image"
            className="absolute bottom-0 left-0 -mb-16 ml-8 rounded-full border-indigo-200 bg-indigo-500 outline outline-8 outline-indigo-500"
            width={128}
            height={128}
          />
        </div>
        <div className="h-16"></div> {/* this is just a spacer */}
        <div className="mt-2 p-4 text-2xl font-bold">{`@${user.username}`}</div>
        <ProfileFeed userId={user.id} />
      </PageLayout>
    </>
  );
};

const ProfileFeed = (props: { userId: string }) => {
  const {
    data: posts,
    isLoading,
    isError,
  } = api.posts.getByUserId.useQuery({
    userId: props.userId,
  });

  if (isLoading) return <LoadingPage />;
  if (isError) return <div>Failed to load posts</div>;
  if (!posts || posts.length === 0) return <div>No posts yet</div>;

  return <PostList posts={posts} />;
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper();

  const username = context.params?.username;

  if (!username || typeof username !== "string" || username.length === 0) {
    throw new Error("Invalid username");
  }

  const usernameWithoutAt = username.replace("@", "");

  await ssg.profile.getUserByUsername.prefetch({ username: usernameWithoutAt });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username: usernameWithoutAt,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default ProfilePage;
