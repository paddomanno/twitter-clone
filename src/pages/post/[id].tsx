import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { PageLayout } from "~/components/MyLayout";
import LoadingPage from "~/components/LoadingSpinner";

import { api } from "~/utils/api";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";
import PostView from "~/components/PostView";

// type PageProps = InferGetServerSidePropsType<typeof getStaticProps>;

const SinglePostPage: NextPage<{ postId: string }> = ({ postId }) => {
  const { data, isLoading, isError } = api.posts.getByPostId.useQuery({
    postId,
  });

  if (isLoading) return <LoadingPage />;
  if (!postId || !data || isError) return <div>Failed to load</div>;

  return (
    <>
      <Head>
        <title>{`Post by ${data.author.username}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <PostView {...data} />
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper();

  const postId = context.params?.id;

  if (!postId || typeof postId !== "string" || postId.length === 0) {
    throw new Error("Invalid postId");
  }

  await ssg.posts.getByPostId.prefetch({ postId });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      postId,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default SinglePostPage;
